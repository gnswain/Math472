mpg %>%
select_if(is.numeric) %>%
filter(is.NA) %>%
map(mean)
mpg %>%
select_if(is.numeric) %>%
filter(is.NA) %>%
map(mean)
mpg %>%
select_if(is.numeric) %>%
filter(na.rm) %>%
map(mean)
mpg %>%
select_if(is.numeric) %>%
map(mean)
mpg %>%
select_if(is.numeric) %>%
map(mean(na.rm = TRUE))
mpg %>%
select_if(is.numeric) %>%
na.omit %>%
map(mean)
#  Consider the data frame, mtcars, which contained only numerical values.  Try using apply() and map() to find means, standard deviations, and quantiles for each column of mtcars
str(mtcars)
apply(mtcars, 2, mean)
map(mtcars, mean)
#  What is the difference between map(mtcars,mean) and map_dbl(mtcars,mean)?  What about between map(mtcars,quantile) and map_dbl(mtcars,quantile)
map(mtcars, mean)
map_dbl(mtcars, mean)
map(mtcars, quantile)
# map_dbl does not work for quantile
#map_dbl(mtcars, quantile)
#  Now switch to our `mpg` data set.  Not all of the variables were numeric here.  Since we can pipe to the map_* functions, see if you can find the mean of each numerical variable in mpg.
str(mpg)
mpg %>%
select_if(is.numeric) %>%
na.omit %>%
map(mean)
mpg %>%
select_if(is.numeric) %>%
map(mean)
mpg %>%
select_if(is.numeric) %>%
na.omit %>%
map(mean)
mpg %>%
select_if(is.numeric) %>%
na.omit %>%
map(mean)
mpg %>%
select_if(is.numeric) %>%
map(mean(., na.rm = TRUE))
mpg %>%
select_if(is.numeric) %>%
map(mean(., rm.na = TRUE))
mpg %>%
select_if(is.numeric) %>%
map(mean(., na.rm = TRUE))
mpg %>%
select_if(is.numeric) %>%
na.omit %>%
map(mean)
models <- mtcars %>%
split(.$cyl) %>%
map(function(df) lm(mpg ~ wt, data = df))
#  Question, could we have used a different map_* function rather than map here?  Why or why not?
models <- mtcars %>%
split(.$cyl) %>%
map(function(df) lm(mpg ~ wt, data = df))
#  Question, could we have used a different map_* function rather than map here?  Why or why not?
models
models <- mtcars %>%
split(.$cyl) %>%
map(~lm(mpg ~ wt, data = .))
models
#  Check out what a summary of an output from lm may look like
summary(models[["6"]])
models %>%
map(summary) %>%
map_dbl(~.$r.squared)
#  or using the name of the desired component
models %>%
map(summary) %>%
map_dbl("r.squared")
map(mtcars, mean)
# b
map(nycflights13::flights, typeof)
# c
map(iris, unique)
# c
map(iris, count(unique)
# c
map(iris, count(unique))
# c
map(iris, count(unique))
# c
map(iris, unique %>% count)
# c
map(iris, unique) %>% count()
# c
map(iris, unique) %>% as.integer(count(.))
# c
map(iris, unique) %>% as.integer() %>% count()
# c
map_int(iris, unique) %>% as.integer() %>% count()
# c
map(iris, unique)
# c
map(iris, unique) %>% map(count)
# c
map(iris, unique) %>% map(.[2], count)
# c
map(iris, unique) %>% map(.[1], count)
# c
map(iris, unique)
# c
map(iris, unique) %>% applyl(count)
# c
map(iris, unique) %>% apply(count)
?apply
# c
map(iris, unique) %>%
select_if(is.numeric()) %>%
map(count)
# c
map(iris, unique) %>%
select_if(is.numeric) %>%
map(count)
# c
map(iris, unique)
# c
map(iris, unique)$Sepal.Length
# c
map(iris, unique)$Sepal.Length[30]
# c
map(iris, unique)$Sepal.Length
# c
map(iris, unique)$Sepal.Length[35}]
# c
map(iris, unique)$Sepal.Length[35]
# c
map(iris, unique)[1]
# c
map(iris, unique) %>% count(.[[]])
# c
count(map(iris, unique), [[]])
# c
count(map(iris, unique)[[]])
map(iris, unique)
# c
count(map(iris, unique)[[1:4]])
# c
count(map(iris, unique)[[1,4]])
map(iris, unique)[[]]
map(iris, unique)[
map(iris, unique)[}
map(iris, unique)[]
map(iris, unique)[1]
map(iris, unique)[1:2]
map(iris, unique)[1:4]
map(iris, unique)[[1:4]]
map(iris, unique)[1:4]{}
map(iris, unique)[1:4][]
map(iris, unique)[1:4][1]
?apply
?unique
# c
count(map(iris, unique))
# c
length(map(iris, unique))
# c
length(map(iris, unique)[])
# c
length(map(iris, unique)[1:5])
# c
map(iris, unique) %>% map(length)
# b
map(nycflights13::flights, typeof)
# b
map_chr(nycflights13::flights, typeof)
# b
map(nycflights13::flights, typeof)
map_chr(nycflights13::flights, typeof)
# c
map(iris, unique) %>% map(length)
# c
iris %>%
map(unique) %>%
map(length)
# c
iris %>%
map(unique) %>%
map_int(length)
# c
iris %>%
map(unique) %>%
map_int(length)
# 2
map(1:5, runif)
# 1d
map(c(-10, 0, 10, 100), rnorm, n = 10)
# 2
map(1:5, runif)
mu <- seq(from = 4, to = 6, by = 0.5)
sigma <- seq(2,1,-0.25)
?map
#  What if you have the same number of means, mu,  and standard deviations, sigma, and they're to be taken pairwise as (mu(i). sigma(i))
mu <- seq(from = 4, to = 6, by = 0.5)
sigma <- seq(2,1,-0.25)
#  Create a data frame with 5 random variables from a normal distribution for each of these mean, std dev pairs using map2
#  Note the variable inputs are given first, then the function followed by any fixed parameters.
map(mu, sigma, rnorm, n = 5)
#  What if you wanted all possible mu and sigma combinations?
#  We can use the `expand.grid()` function to help
(ms <- expand.grid(mu = mu,sigma = sigma))
(df2 <- map2(ms$mu, ms$sigma, rnorm, n=10))
mu <- seq(from = 4, to = 6, by = 0.5)
sigma <- seq(2,1,-0.25)
#  Create a data frame with 5 random variables from a normal distribution for each of these mean, std dev pairs using map2
#  Note the variable inputs are given first, then the function followed by any fixed parameters.
map(mu, sigma, rnorm, n = 5)
mu <- seq(from = 4, to = 6, by = 0.5)
sigma <- seq(2,1,-0.25)
#  Create a data frame with 5 random variables from a normal distribution for each of these mean, std dev pairs using map2
#  Note the variable inputs are given first, then the function followed by any fixed parameters.
map(mu, sigma, rnorm, n = 5)
#  Create a data frame with 5 random variables from a normal distribution for each of these mean, std dev pairs using map2
#  Note the variable inputs are given first, then the function followed by any fixed parameters.
map2(mu, sigma, rnorm, n = 5)
(ms <- expand.grid(mu = mu,sigma = sigma))
(df2 <- map2(ms$mu, ms$sigma, rnorm, n=10))
expand.grid(age = c(18, 19, 20, 21),
major = c("math", "cs", "chem"),
class = c("undergrad", "grad"))
library(modelr)
options(na.action = na.warn)
glimpse(sim1)
#  Go ahead and make a scatter plot of this data
sim1 %>%
ggplot() +
geom_point(aes(x, y))
p + geom_abline(slope = 2, intercept = 5)
#  Go ahead and make a scatter plot of this data
p <- (sim1 %>%
ggplot() +
geom_point(aes(x, y)))
p + geom_abline(slope = 2, intercept = 5)
p + geom_abline(slope = 2.5, intercept = 5)
p + geom_abline(slope = 2.5, intercept = 0)
5
5
5
p + geom_abline(slope = 2, intercept = 5)
model_params <- tibble(
a0 = runif(250, -20, 40),
a1 = runif(250, -5, 5)
)
ggplot(sim1, aes(x, y)) +
geom_abline(aes(intercept = a0, slope = a1),
data = model_params, alpha = 1/4) +
geom_point()
ggplot(sim1, aes(x, y)) +
geom_abline(aes(intercept = a0, slope = a1),
data = model_params, alpha = 1/4) +
geom_point()
model_params <- tibble(
a0 = runif(250, -20, 40),
a1 = runif(250, -5, 5)
)
ggplot(sim1, aes(x, y)) +
geom_abline(aes(intercept = a0, slope = a1),
data = model_params, alpha = 1/4) +
geom_point()
model_params <- tibble(
a0 = runif(250, -20, 40),
a1 = runif(250, -5, 5)
)
ggplot(sim1, aes(x, y)) +
geom_abline(aes(intercept = a0, slope = a1),
data = model_params, alpha = 1/4) +
geom_point()
model_params <- tibble(
a0 = runif(250, -20, 40),
a1 = runif(250, -5, 5)
)
ggplot(sim1, aes(x, y)) +
geom_abline(aes(intercept = a0, slope = a1),
data = model_params, alpha = 1/4) +
geom_point()
model_params <- tibble(
a0 = runif(250, -20, 40),
a1 = runif(250, -5, 5)
)
ggplot(sim1, aes(x, y)) +
geom_abline(aes(intercept = a0, slope = a1),
data = model_params, alpha = 1/4) +
geom_point()
model_params <- tibble(
a0 = runif(250, -20, 40),
a1 = runif(250, -5, 5)
)
ggplot(sim1, aes(x, y)) +
geom_abline(aes(intercept = a0, slope = a1),
data = model_params, alpha = 1/4) +
geom_point()
ggplot(sim1, aes(jitter_x, y, ymax = y,
ymin = my_model(jitter_x))) +
geom_pointrange(color = "red") +
geom_abline(intercept = 1, slope = 2.5, color = "blue")
my_model <- function ( x ) { 2.5 * x + 1 }
ggplot(sim1, aes(jitter_x, y, ymax = y,
ymin = my_model(jitter_x))) +
geom_pointrange(color = "red") +
geom_abline(intercept = 1, slope = 2.5, color = "blue")
my_model <- function ( x ) { 2.5 * x + 1 }
jitter_x <- sim1$x + runif(min=-0.75,max=0.75,n=length(x))
ggplot(sim1, aes(jitter_x, y, ymax = y,
ymin = my_model(jitter_x))) +
geom_pointrange(color = "red") +
geom_abline(intercept = 1, slope = 2.5, color = "blue")
find_y_line <- function(param, x) {
yvals <- vector("double", length(x))
}
find_y_line <- function(param, x) {
yvals <- vector("double", length(x))
#  for (i in seq_along(x)) {
#    yvals[i] <- param[1] + param[2] * x[[i]]
#  }
# assume a0 = param[1], a1 = param[2]
yvals <- param[1] + param[2] * x
}
find_y_line <- function(param, x) {
yvals <- vector("double", length(x))
#  for (i in seq_along(x)) {
#    yvals[i] <- param[1] + param[2] * x[[i]]
#  }
# assume a0 = param[1], a1 = param[2]
yvals <- param[1] + param[2] * x
}
x <- 1:10
y <- find_y_line(c(2, -1/2), x)
find_y_line <- function(param, x) {
yvals <- vector("double", length(x))
#  for (i in seq_along(x)) {
#    yvals[i] <- param[1] + param[2] * x[[i]]
#  }
# assume a0 = param[1], a1 = param[2]
yvals <- param[1] + param[2] * x
}
x <- 1:10
y <- find_y_line(c(2, -1/2), x)
y
plot(x, y)
calc_rms <- function( params, df) {
yhat <- find_y_line(params, df$x)
}
rms <- dist_rms(yhat, df$y)
calc_rms <- function( params, df) {
yhat <- find_y_line(params, df$x)
rms <- dist_rms(yhat, df$y)
}
rms
calc_rms <- function( params, df) {
yhat <- find_y_line(params, df$x)
rms <- dist_rms(yhat, df$y)
rms
}
myrms <- calc_rms(c(2, 5), sim1)
myrms
calc_rms <- function( params, df) {
yhat <- find_y_line(params, df$x)
rms <- dist_rms(yhat, df$y)
rms
}
myrms <- calc_rms(c(2, 5), sim1)
myrms
calc_rms <- function( params, df) {
yhat <- find_y_line(params, df$x)
rms <- dist_rms(yhat, df$y)
rms
}
myrms <- calc_rms(c(2, 5), sim1)
myrms
calc_rms <- function( params, df) {
yhat <- find_y_line(params, df$x)
rms <- dist_rms(yhat, df$y)
rms
}
myrms <- calc_rms(c(2, 5), sim1)
myrms
calc_rms <- function( params, df) {
yhat <- find_y_line(params, df$x)
rms <- dist_rms(yhat, df$y)
rms
}
myrms <- calc_rms(c(2, 5), sim1)
myrms
# checking the erro on our guess, y = 5 + 2x
(myrms <- calc_rms(c(2, 5), sim1))
# checking the erro on our guess, y = 5 + 2x
(myrms <- calc_rms(c(5, 2), sim1))
sim1_distance <- function (a0, a1) {
calc_rms( c(a0, a1), sim1)
}
model_parms$errors <- map_dbl(model_params, sim1_distance(5, 2))
model_params$errors <- map_dbl(model_params, sim1_distance(5, 2))
model_params %>%
mutate(err = map_dbl(sim1_distance(c(5, 2))))
model_params %>%
mutate(err = map_dbl(sim1_distance(., c(5, 2))))
model_params %>%
mutate(err = map_dbl2(a0, a1, sim1_distance()))
model_params %>%
mutate(err = map_dbl2(a0, a1, sim1_distance))
model_params %>%
mutate(err = map2_dbl(a0, a1, sim1_distance))
base_graph <- (sim1 %>%
ggplot(aex(x,y)) +
geom_point())
base_graph <- (sim1 %>%
ggplot(aes(x,y)) +
geom_point())
base_graph +
geom_abline(intercept = a0, slope = a1, data = filter(model_params, rank(err) <= 10))
base_graph +
geom_abline(intercept = a0, slope = a1, data = filter(model_params, rank(model_params$err) <= 10))
base_graph <- (sim1 %>%
ggplot(aes(x,y)) +
geom_point())
base_graph +
geom_abline(intercept = a0, slope = a1, data = filter(model_params, rank(model_params$err) <= 10))
model_params <- (model_params %>%
mutate(err = map2_dbl(a0, a1, sim1_distance)))
base_graph <- (sim1 %>%
ggplot(aes(x,y)) +
geom_point())
base_graph +
geom_abline(intercept = a0, slope = a1, data = filter(model_params, rank(model_params$err) <= 10))
base_graph <- (sim1 %>%
ggplot(aes(x,y)) +
geom_point())
base_graph +
geom_abline(intercept = a0, slope = a1, data = filter(model_params, rank(model_params$err) <= 10), col = model_params$err)
base_graph <- (sim1 %>%
ggplot(aes(x,y)) +
geom_point())
base_graph +
geom_abline(aes(intercept = a0,
slope = a1,
data = filter(model_params, rank(model_params$err) <= 10),
col = model_params$err))
base_graph <- (sim1 %>%
ggplot(aes(x,y)) +
geom_point())
base_graph +
geom_abline(aes(intercept = a0,
slope = a1),
data = filter(model_params, rank(model_params$err) <= 10),
col = model_params$err)
base_graph +
geom_abline(aes(intercept = a0,
slope = a1, color = -err),
data = filter(model_params, rank(err) <= 1-),
base_graph +
geom_abline(aes(intercept = a0,
slope = a1, color = -err),
data = filter(model_params, rank(err) <= 10),
col = model_params$err)
base_graph +
geom_abline(aes(intercept = a0, slope = a1, color = -err),
data = filter(model_params, rank(err) <= 10))
base_graph <- (sim1 %>%
ggplot(aes(x,y)) +
geom_point())
base_graph +
geom_abline(aes(intercept = a0, slope = a1, color = -err),
data = filter(model_params, rank(err) <= 10))
base_graph <- (sim1 %>%
ggplot(aes(x,y)) +
geom_point())
base_graph +
geom_abline(aes(intercept = a0, slope = a1, color = -err),
data = filter(model_params, rank(-err) <= 10))
base_graph +
geom_abline(aes(intercept = a0, slope = a1, color = -err),
data = filter(model_params, rank(err) >= 10))
<
base_graph <- (sim1 %>%
ggplot(aes(x,y)) +
geom_point())
base_graph +
geom_abline(aes(intercept = a0, slope = a1, color = -err),
data = filter(model_params, rank(err) <= 10))
?rank
base_graph <- (sim1 %>%
ggplot(aes(x,y)) +
geom_point())
base_graph +
geom_abline(aes(intercept = a0, slope = a1, color = -err),
data = filter(model_params, rank(err, na.last = FALSE) <= 10))
base_graph <- (sim1 %>%
ggplot(aes(x,y)) +
geom_point())
base_graph +
geom_abline(aes(intercept = a0, slope = a1, color = -err),
data = filter(model_params, desc(rank(err)) <= 10))
base_graph <- (sim1 %>%
ggplot(aes(x,y)) +
geom_point())
base_graph +
geom_abline(aes(intercept = a0, slope = a1, color = -err),
data = filter(model_params, rank(err) <= 10))
