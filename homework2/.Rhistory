ggplot(data = bm) +
geom_bar(mapping = aes(x = marital, fill = marital), stat = "count") +
coord_flip()
ggplot(data = bm) +
geom_bar(mapping = aes(x = marital, fill = marital), stat = "prop") +
coord_flip()
ggplot(data = bm) +
geom_bar(mapping = aes(x = marital, fill = marital), stat = "count") +
coord_flip()
ggplot(data = bm) +
geom_bar(mapping = aes(x = marital, y = ..prop.., fill = marital), stat = "count") +
coord_flip()
ggplot(data = bm) +
geom_bar(mapping = aes(x = marital, y = ..prop.., fill = marital, group = 1), stat = "count") +
coord_flip()
ggplot(data = bm, aes(y=fl)) +
geom_bar(mapping = aes(x = marital, y = ..prop.., fill = marital, group = 1), stat = "count")
ggplot(data = bm, aes(y=prop)) +
geom_bar(mapping = aes(x = marital, fill = marital), stat = "count") +
coord_flip()
ggplot(data = bm, aes(y='prop')) +
geom_bar(mapping = aes(x = marital, fill = marital), stat = "count") +
coord_flip()
ggplot(data = bm, aes(y = fl)) +
geom_bar(mapping = aes(x = marital, fill = marital), stat = "count") +
coord_flip()
ggplot(data = bm, aes(y = fl)) +
geom_bar(mapping = aes(x = marital, fill = marital), stat = "count")
ggplot(data = bm, aes(y = fl)) +
geom_bar(mapping = aes(x = marital, y = ..prop.., fill = marital), stat = "count")
ggplot(data = bm, aes(y = fl)) +
geom_bar(mapping = aes(x = marital, y = ..prop.., fill = marital, group = 1), stat = "count")
ggplot(data = bm) +
geom_bar(mapping = aes(x = marital, y = ..prop.., fill = marital, group = 1), stat = "count") +
coord_flip()
ggplot(data = bm) +
geom_bar(mapping = aes(x = marital, y = ..prop.., fill = marital, group = 1), stat = "count") +
coord_flip() +
scale_colour_manual(rainbow(6))
ggplot(data = bm) +
geom_bar(mapping = aes(x = marital, y = ..prop.., fill = marital, group = 1), stat = "count") +
coord_flip() +
scale_colour_manual(values = rainbow(6))
ggplot(data = bm) +
geom_bar(mapping = aes(x = marital, y = ..prop.., fill = marital), stat = "count") +
coord_flip() +
scale_colour_manual(values = rainbow(6))
ggplot(data = bm) +
geom_bar(mapping = aes(x = marital, y = ..prop.., fill = marital), stat = "count") +
coord_flip()
ggplot(data = bm) +
geom_bar(mapping = aes(x = marital, y = ..prop.., fill = marital, group = 1)) +
coord_flip()
ggplot(data = bm) +
geom_bar(mapping = aes(x = marital, fill = marital)) +
ylab('prop') +
coord_flip()
ggplot(data = bm) +
geom_bar(mapping = aes(x = marital, y = ..prop.., fill = marital, group = 1)) +
coord_flip()
ggplot(data = bm) +
geom_bar(mapping = aes(x = marital, y = stat(prop), fill = marital, group = 1)) +
coord_flip()
ggplot(data = bm) +
geom_bar(mapping = aes(x = marital, y = stat(prop), fill = marital) group = 1) +
ggplot(data = bm) +
geom_bar(mapping = aes(x = marital, y = stat(prop), fill = marital), group = 1) +
coord_flip()
ggplot(data = bm) +
geom_bar(mapping = aes(x = marital, y = stat(prop), fill = marital, group = 1)) +
coord_flip()
ggplot(data = bm) +
geom_bar(mapping = aes(x = marital, y = after_stat(prop), fill = marital, group = 1)) +
coord_flip()
ggplot(data = bm) +
geom_bar(mapping = aes(x = marital, y = stat(prop), group = 1, fill = marital)) +
coord_flip()
ggplot(data = bm) +
geom_bar(mapping = aes(x = marital, y = stat(prop), group = 1, fill = rainbow(6))) +
coord_flip()
ggplot(data = bm) +
geom_bar(mapping = aes(x = marital, y = stat(prop), group = 1), fill = rainbow(6)) +
coord_flip()
ggplot(data = bm) +
geom_bar(mapping = aes(x = race, fill = marital)) +
coord_flip()
ggplot(data = bm) +
geom_boxplot(mapping = aes(x = bmi, fill = race)) +
coord_flip()
ggplot(data = bm) +
geom_boxplot(mapping = aes(x = race, fill = bmi))
ggplot(data = bm) +
geom_boxplot(mapping = aes(x = race, y = bmi))
ggplot(data = bm) +
geom_boxplot(mapping = aes(x = race, y = bmi)) +
coord_flip()
ggplot(data = bm) +
geom_boxplot(mapping = aes(x = race, y = bmi, color = race)) +
coord_flip()
ggplot(data = bm) +
geom_boxplot(mapping = aes(x = race, y = bmi, fill = race)) +
coord_flip()
ggplot(data = bm) +
geom_boxplot(mapping = aes(x = race, y = bmi), fill = race) +
coord_flip()
ggplot(data = bm) +
geom_boxplot(mapping = aes(x = race, y = bmi), fill = rainbox(6)) +
coord_flip()
ggplot(data = bm) +
geom_boxplot(mapping = aes(x = race, y = bmi), fill = rainbow(6)) +
coord_flip()
ggplot(data = bm) +
geom_boxplot(mapping = aes(x = race, y = bmi), fill = rainbow(5)) +
coord_flip()
ggplot(data = bm) +
geom_boxplot(mapping = aes(x = race, y = bmi), fill = race) +
coord_flip()
ggplot(data = bm) +
geom_boxplot(mapping = aes(x = race, y = bmi), fill = rainbow(5)) +
coord_flip()
ggplot(data = bm) +
geom_boxplot(mapping = aes(x = race, y = bmi, fill = race)) +
guides(fill = "none")
coord_flip()
ggplot(data = bm) +
geom_boxplot(mapping = aes(x = race, y = bmi, fill = race)) +
guides(fill = "none") +
coord_flip()
?geom_smooth
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE, se = FALSE
)
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
?geom_smooth
ggplot(data = bm)  +
geom_smooth(mapping = aes(x = bmi, y = wt))
ggplot(data = bm)  +
geom_smooth(mapping = aes(x = bmi, y = wt))
ggplot(data = bm)  +
geom_smooth(mapping = aes(x = bmi, y = wt))
ggplot(data = bm)  +
geom_smooth(mapping = aes(x = bmi, y = wt), se = FALSE)
library(tidyverse)
bm = read.csv('bodymeas.csv')
ggplot(data = bm) +
geom_point(mapping = aes(x = upperArmLength, y = ht, shape = gender, color = bmi))
ggplot(data = bm) +
geom_point(mapping = aes(x = bmi, y = wt, color = gender, alpha = age)) +
facet_wrap(~ marital, nrow = 3)
ggplot(data = bm) +
geom_point(mapping = aes(x = bmi, y = wt, color = race)) +
geom_smooth(mapping = aes(x = bmi, y = wt)) +
facet_wrap(~ race, nrow = 3)
ggplot(data = bm) +
geom_bar(mapping = aes(x = marital, y = stat(prop), group = 1), fill = rainbow(6)) +
coord_flip()
ggplot(data = bm) +
geom_bar(mapping = aes(x = race, fill = marital)) +
coord_flip()
ggplot(data = bm) +
geom_boxplot(mapping = aes(x = race, y = bmi, fill = race)) +
guides(fill = "none") +
coord_flip()
ggplot(data = bm)  +
geom_smooth(mapping = aes(x = bmi, y = wt))
ggplot(data = bm)  +
geom_smooth(mapping = aes(x = bmi, y = wt), se = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
install.packages("nycflights13")
install.packages("nycflights13")
library(nycflights13)
View(flights)
head(flights, 5)
arrange(flights, dest, carrier)
arrange(flights, dest, desc(carrier))
arrange(flights, dest, desc(carrier), dep_time)
arrange(flights, dest, desc(carrier), dep_time)
nrow(flights)
arrange(flights, dest, desc(carrier), dep_time)
arranage(flights, arr_delay)
arrange(flights, arr_delay)
?flights
flights?
arrange(flights, desc(arr_delay), arr_time)
arrange(flights, desc(arr_delay), arr_time)
?flights
?flights
arrange(flight, distance)
arrange(flights, distance)
d = arrange(flights, distance)
head(d)
arrange(flights, desc(arr_delay), dep_time)
arrange(flights, distance)
arrange(flights, desc(distance))
library(nycflights13)
?flights
head(arrange(flights, distance))
arrange(flights, desc(distance))
head(arrange(flights, distance))
head(arrange(flights, desc(distance)))
flights <- select(flights, -(time_hour))
flights <- select(flights, -(time_hour))  # all except time_hour
flights <- select(flights, -(time_hour))  # all except time_hour
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
install.packages("nycflights13")
library(nycflights13)
View(flights)
head(flights, 5)
arrange(flights, dest, desc(carrier), dep_time)
arrange(flights, arr_delay)
arrange(flights, desc(arr_delay), dep_time)
head(arrange(flights, distance))
head(arrange(flights, desc(distance)))
install.packages("nycflights13")
flights <- select(flights, -(time_hour))  # all except time_hour
#flights <- select(flights, -(time_hour))  # all except time_hour
#View(flights)
flights2 <- select(flights, year:distance) # all from "year" through "distance"
View(flights2)
select(flights, dep_time, dep_delay, everything())
select(flights, starts_with(dep_time, dep_delay))
select(flights, starts_with('dep'), everything())
select(flights, starts_with('dep'), starts_with('arr'))
select(flights, starts_with('dep', 'arr'), starts_with('arr'))
select(flights, dept_time, dep_delay, arr_time, arr_delay)
select(flights, dep_time, dep_delay, arr_time, arr_delay)
select(flights, starts_with('dep'), starts_with('arr'))
select(flights, dep_time, dep_delay, arr_time, arr_delay)
select(flights, starts_with('dep'), starts_with('arr'))
select(flights, contains('dep'), contains('arr'))
select(flights, dep_time, dep_delay, arr_time, arr_delay)
select(flights, starts_with('dep'), starts_with('arr'))
select(flights, contains('dep'), contains('arr'), -(carrier))
select(flights, dep_time, dep_delay, arr_time, arr_delay)
select(flights, starts_with('dep'), starts_with('arr'))
select(flights, contains('dep'), contains('arr'), -(carrier, sched_dep_time))
select(flights, dep_time, dep_delay, arr_time, arr_delay)
select(flights, starts_with('dep'), starts_with('arr'))
select(flights, contains('dep'), contains('arr'), -(carrier), -sched_dep_time)
select(flights, dep_time, dep_delay, arr_time, arr_delay)
select(flights, starts_with('dep'), starts_with('arr'))
select(flights, contains('dep'), contains('arr'), -carrier, -sched_dep_time, -sched_arr_time)
select(flights, dep_time, dep_delay, arr_time, arr_delay)
select(flights, starts_with('dep'), starts_with('arr'))
select(flights, contains('dep'), contains('arr'), -carrier, -sched_dep_time, -sched_arr_time)
select(flights, contains('dep'), contains('arr'), -everything())
select(flights, dep_time, dep_delay, arr_time, arr_delay)
select(flights, starts_with('dep'), starts_with('arr'))
select(flights, contains('dep'), contains('arr'), -carrier, -sched_dep_time, -sched_arr_time)
select(flights, ends_with('time'), ends_with('delay'))
select(flights, dep_time, dep_delay, arr_time, arr_delay)
select(flights, starts_with('dep'), starts_with('arr'))
select(flights, contains('dep'), contains('arr'), -carrier, -sched_dep_time, -sched_arr_time)
select(flights, ends_with('time'), ends_with('delay'), -sched_dep_time, -sched_arr_time, -air_time)
select(flights, year, year)
select(flights, year, year)
ars <- c("year", "month", "day", "dep_delay", "arr_delay")
ars <- c("year", "month", "day", "dep_delay", "arr_delay")
ars
?any_of()
?any_of
ars <- c("year", "month", "day", "dep_delay", "arr_delay")
ars
select(flights, any_of(ars))
select(flights, contains("TIME"))
?contains()
select(flights, contains("TIME"))
select(flights, contains("TIME", ignore.case = FALSE))
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
filter(flights, air_time > 180)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
install.packages("nycflights13")
library(nycflights13)
View(flights)
head(flights, 5)
arrange(flights, dest, desc(carrier), dep_time)
arrange(flights, arr_delay)
arrange(flights, desc(arr_delay), dep_time)
head(arrange(flights, distance))
head(arrange(flights, desc(distance)))
flights <- select(flights, -(time_hour))  # all except time_hour
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
install.packages("nycflights13")
library(nycflights13)
View(flights)
head(flights, 5)
arrange(flights, dest, desc(carrier), dep_time)
arrange(flights, arr_delay)
arrange(flights, desc(arr_delay), dep_time)
head(arrange(flights, distance))
head(arrange(flights, desc(distance)))
#flights <- select(flights, -(time_hour))  # all except time_hour
#View(flights)
flights2 <- select(flights, year:distance) # all from "year" through "distance"
View(flights2)
select(flights, dep_time, dep_delay, everything())
select(flights, starts_with('dep'), everything())
select(flights, dep_time, dep_delay, arr_time, arr_delay)
select(flights, starts_with('dep'), starts_with('arr'))
select(flights, contains('dep'), contains('arr'), -carrier, -sched_dep_time, -sched_arr_time)
select(flights, ends_with('time'), ends_with('delay'), -sched_dep_time, -sched_arr_time, -air_time)
select(flights, year, year)
ars <- c("year", "month", "day", "dep_delay", "arr_delay")
ars
select(flights, any_of(ars))
select(flights, contains("TIME"))
select(flights, contains("TIME", ignore.case = FALSE))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
install.packages("nycflights13")
library(nycflights13)
View(flights)
head(flights, 5)
arrange(flights, dest, desc(carrier), dep_time)
arrange(flights, arr_delay)
arrange(flights, desc(arr_delay), dep_time)
head(arrange(flights, distance))
head(arrange(flights, desc(distance)))
#flights <- select(flights, -(time_hour))  # all except time_hour
#View(flights)
flights2 <- select(flights, year:distance) # all from "year" through "distance"
View(flights2)
select(flights, dep_time, dep_delay, everything())
select(flights, starts_with('dep'), everything())
select(flights, dep_time, dep_delay, arr_time, arr_delay)
select(flights, starts_with('dep'), starts_with('arr'))
select(flights, contains('dep'), contains('arr'), -carrier, -sched_dep_time, -sched_arr_time)
select(flights, ends_with('time'), ends_with('delay'), -sched_dep_time, -sched_arr_time, -air_time)
select(flights, year, year)
ars <- c("year", "month", "day", "dep_delay", "arr_delay")
ars
select(flights, any_of(ars))
select(flights, contains("TIME"))
select(flights, contains("TIME", ignore.case = FALSE))
filter(flights, air_time > 180)
filter(flights, air_time > 180, dep_delay > 30)
filter(flights, air_time > 180 | dep_delay > 30)
filter(flights, air_time > 180 , !(carrier == "DL"))
head(filter(flights, carrier %in% c("AA", "DL", "UA")),5)
fliter(flights, arr_delay > 119)
filter(flights, arr_delay > 119)
filter(flights, arr_delay > 119, dest %in% c('IAH', 'HOU'))
filter(flights, arr_delay > 119)
filter(flights, dest %in% c('IAH', 'HOU'))
filter(flights, arr_delay > 119 & dept_delay < 1)
filter(flights, arr_delay > 119)
filter(flights, dest %in% c('IAH', 'HOU'))
filter(flights, arr_delay > 119 & dep_delay < 1)
filter(flights, arr_delay > 119)
filter(flights, dest %in% c('IAH', 'HOU'))
filter(flights, arr_delay > 119 & dep_delay < 1)
filter(flights, dep_delay >= 60 & arr_delay <= 30)
filter(flights, arr_delay > 119)
filter(flights, dest %in% c('IAH', 'HOU'))
filter(flights, arr_delay > 119 & dep_delay < 1)
filter(flights, dep_delay >= 60 & arr_delay <= 30)
filter(flights, dep_time >= 0 & dep_time <= 600)
?between
filter(flights, dept = 'NA')
filter(flights, dept = NA)
filter(flights, dept_time = NA)
filter(flights, dept_time == NA)
filter(flights, dept_time = NA)
select(flights, dept_time = NA)
filter(flights, dept_time = NA)
filter(flights, dep_time = NA)
filter(flights, air_time = NA)
filter(flights, dep_time = NA)
filter(flights, arr_delay > 119)
filter(flights, dest %in% c('IAH', 'HOU'))
filter(flights, arr_delay > 119 & dep_delay < 1)
filter(flights, dep_delay >= 60 & arr_delay < 30)
filter(flights, dep_time >= 0 & dep_time <= 600)
filter(flights, dep_time %in% c(NA))
filter(flights, is.na(dep_time))
(not_cancelled <- filter(flights, !is.na(dep_time)))
(flights_new <- mutate(flights, gain = arr_delay - dep_delay))
(flights_new <- mutate(flights, gain = arr_delay - dep_delay, speed = abs(distance / time)))
(flights_new <- mutate(flights, gain = arr_delay - dep_delay, speed = distance / time))
(flights_new <- mutate(flights, (gain = arr_delay - dep_delay), speed = abs(distance / air_time)))
(flights_new <- mutate(flights, gain = arr_delay - dep_delay, speed = abs(distance / air_time)))
?flights
(flights_new <- mutate(flights, gain = arr_delay - dep_delay, speed = abs(distance / (air_time * 60))))
(flights_new <- mutate(flights, gain = arr_delay - dep_delay, speed = abs((distance / air_time) * 60)))
(flights_new <- mutate(flights, gain = arr_delay - dep_delay, speed = abs(distance / air_time) * 60))
# gain in minutes
# speed in miles / hour
arrange(flights_new, desc(speed))
arrange(flights_new, desc(speed))
arrange(flights_new, (speed))
13 %/% 4 # integer division
13 %% 4  # remainder of that integer division
(flights_new <- mutate(new_flights, dep_in_mins = (dep_time %/% 100) + (dep_time %% 100), arr_in_min = (arr_time %/% 100) + (arr_time %% 100)))
(flights_new <- mutate(flights_new, dep_in_mins = (dep_time %/% 100) + (dep_time %% 100), arr_in_min = (arr_time %/% 100) + (arr_time %% 100)))
(flights_new <- mutate(flights_new, dep_in_mins = dep_time %/% 100 + dep_time %% 100, arr_in_min = arr_time %/% 100 + arr_time %% 100))
(flights_new <- mutate(flights_new, dep_in_mins = (dep_time %/% 100) * 60 + dep_time %% 100, arr_in_min = (arr_time %/% 100) * 60 + arr_time %% 100))
(transmute(flights_new, air_time = air_time, tot_time = arr_in_mins - dep_in_mins))
(flights_new <- mutate(flights_new, dep_in_mins = (dep_time %/% 100) * 60 + dep_time %% 100, arr_in_mins = (arr_time %/% 100) * 60 + arr_time %% 100))
(transmute(flights_new, air_time = air_time, tot_time = arr_in_mins - dep_in_mins))
(flights_new <- mutate(flights_new, dep_in_mins = (dep_time %/% 100) * 60 + dep_time %% 100, arr_in_mins = (arr_time %/% 100) * 60 + arr_time %% 100))
flights_new <- select(flights_new, -arr_in_min)
(transmute(flights_new, air_time = air_time, tot_time = arr_in_mins - dep_in_mins))
transmute(flights_new, air_time = air_time, tot_time = (arr_in_mins - dep_in_mins) %% (24 * 60))
comp_air_times <- transmute(flights_new, air_time, tot_time = (arr_in_mins - dep_in_mins) %% (24 * 60))
arrange(comp_air_times, tot_time)
comp_air_time <- transmute(flights_new, air_time, tot_time = arr_in_mins - dep_in_mins)
arrange(comp_air_times, tot_time)
comp_air_times <- transmute(flights_new, air_time, tot_time = (arr_in_mins - dep_in_mins) %% (24 * 60))
arrange(comp_air_times, tot_time)
comp_air_times <- transmute(flights_new, air_time, tot_time = (arr_in_mins - dep_in_mins) %% (24 * 60))
arrange(comp_air_times, desc(tot_time))
comp_air_times <- transmute(flights_new, air_time, tot_time = (arr_in_mins - dep_in_mins) %% (24 * 60))
arrange(comp_air_times, tot_time)
gc()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
salary <- read.csv("salary.csv")
View(salary)
?salary
#salary_hour <- mutate(salary,)
as.Date(salary$hire_date)
#salary_hour <- mutate(salary,)
as.Date(salary[1]$hire_date)
#salary_hour <- mutate(salary,)
as.Date(salary$hire_date[1])
#salary_hour <- mutate(salary,)
as.Date(salary[1,]$hire_date)
salary1 <- mutate(salary, hr_yr = hire_date %/% 10000000)
salary1
salary1 <- mutate(salary, hr_yr = hire_date %/% 10000)
salary1
salary1 <- mutate(salary, hr_yr = hire_date %/% 10000, hr_day = hire_date %% 100)
salary1
salary1 <- mutate(salary, hr_yr = hire_date %/% 10000, hr_month = (hire_date %% 10000) %/% 10 , hr_day = hire_date %% 100)
salary1
salary1 <- mutate(salary, hr_yr = hire_date %/% 10000, hr_month = (hire_date %% 10000) %/% 100 , hr_day = hire_date %% 100)
salary1
salary1 <- mutate(salary, hr_yr = hire_date %/% 10000, hr_month = (hire_date %% 10000) %/% 100 , hr_day = hire_date %% 100, yrs_here = 2022 - hr_yr)
salary1
salary1 <- mutate(salary, hr_yr = hire_date %/% 10000, hr_month = (hire_date %% 10000) %/% 100 , hr_day = hire_date %% 100, yrs_here = 2022 - hr_yr)
salary1
(salary_eng <- filter(salary, home_dept == "English"))
salary <- mutate(salary, hr_yr = hire_date %/% 10000, hr_month = (hire_date %% 10000) %/% 100 , hr_day = hire_date %% 100, yrs_here = 2022 - hr_yr)
salary
(salary_eng <- filter(salary, home_dept == "English"))
(salary_eng <- filter(salary, home_dept == "English"))
dept_stats <- (salary %>%
group_by(home_dept, work_title) %>%
summarize(mean_salary = mean(annual_salary), med_age = median(age), std_years = sd(yrs_here)))
(salary_eng <- filter(salary, home_dept == "English"))
dept_stats <- (salary %>%
group_by(home_dept, work_title) %>%
summarize(mean_salary = mean(annual_salary), med_age = median(age), std_years = sd(yrs_here)))
dept_stats
(salary_eng <- filter(salary, home_dept == "English"))
dept_stats <- (salary %>%
group_by(home_dept, work_title) %>%
summarize(mean_salary = mean(annual_salary),
med_age = median(age), std_years = sd(yrs_here)))
dept_stats
(salary_eng <- filter(salary, home_dept == "English"))
dept_stats <- (salary %>%
group_by(home_dept, work_title) %>%
summarize(mean_salary = mean(annual_salary, na.rm = TRUE),
med_age = median(age, na.rm = TRUE),
std_years = sd(yrs_here, na.rm = TRUE)))
dept_stats
sum(dept_stats$mean_salary)
sum(filter(salary, home_dept = "Computer Science")$annual_salary)
filter(salary, home_dept = "Computer Science") %>% sum(annual_salary)
filter(salary, home_dept == "Computer Science") %>% sum(annual_salary)
sum(filter(salary, home_dept == "Computer Science")$annual_salary)
cs <- filter(salary, home_dept == "Computer Science")
sum(cs$annual_salary)
cs <- filter(salary, home_dept == "Computer Science")
cs
sum(cs$annual_salary)
View(salary)
cs <- filter(salary, home_dept == "Mathematics & Computer Science")
cs
sum(cs$annual_salary)
(salary_eng <- filter(salary, home_dept == "English"))
dept_stats <- (salary %>%
group_by(home_dept, work_title) %>%
summarize(mean_salary = mean(annual_salary, na.rm = TRUE),
med_age = median(age, na.rm = TRUE),
std_years = sd(yrs_here, na.rm = TRUE)))
dept_stats
(salary_eng <- filter(salary, home_dept == "English"))
dept_stats <- (salary %>%
group_by(home_dept, work_title) %>%
summarize(mean_salary = mean(annual_salary, na.rm = TRUE),
med_age = median(age, na.rm = TRUE),
std_years = sd(yrs_here, na.rm = TRUE)))
dept_stats
